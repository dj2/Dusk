constant:
  array layer count undefined: >
    Undefined value for array layer count. Providing undefined will cause a
    default value to be used.
  copy stride undefined: >
    Undefined value for copy stride. Providing undefined will cause a
    default value to be used.
  limit u32 undefined: >
    Undefined U32 limit value. Providing undefined will cause a
    default value to be used.
  limit u64 undefined: >
    Undefined U64 limit value. Providing undefined will cause a
    default value to be used.
  mip level count undefined: >
    Undefined mip level count. Providing undefined will cause a
    default value to be used.
  stride undefined: >
    Undefined stride. Providing undefined will cause a
    default value to be used.
  whole map size: >
    Value representing size of entire map. Providing undefined will cause a
    default value to be used.
  whole size: >
    Value representing the whole size value. Providing undefined will cause a
    default value to be used.

enum:
  adapter type:
    description: Provides information on the type of adapter.
    values:
      discrete GPU: A separate discrete GPU adapter
      integrated GPU: An integrated GPU / CPU adapter
      CPU: A CPU adapter
      unknown: A unknown adapter type

  address mode:
    description: >
      Describes the behaviour of the sampler if the sampler footprint extends
      beyond the bounds of the sampled texture.
    ref:
      name: GPUAddressMode
      anchor: '#enumdef-gpuaddressmode'
    values:
      repeat: Texture coordinates wrap to the other side of the texture
      mirror repeat: >
          Texture coordinates wrap to the other side of the texture, but the
          texture is flipped when the integer part of the coordinate is odd.
      clamp to edge: Texture coordinates are clamped between 0.0 and 1.0, inclusive.

  alpha mode:
    description: >
      Selects how the contents of the surface will be interpreted when read,
      when rendered to the screen or used as an image source.
    ref:
      name: GPUCanvasAlphaMode
      anchor: '#GPUCanvasAlphaMode'
    values:
      premultiplied: >
          Read RBGA as premultipled: color values are premultipled by their
          alpha value.
      unpremultiplied: >
          Read RGBA as not premulitipled: Color values are not premultipled by
          their alpha value
      opaque: Read RGB as opaque and ignore alpha value

  backend type:
    description: >
      Specifies the type of backend to use with Dawn.
    ref:
    values:
      'null': A null backend
      WebGPU: The WebGPU backend
      D3D11: The D3D11 backend
      D3D12: The D3D12 backend
      metal: The Metal backend
      vulkan: The Vulkan backend
      openGL: The OpenGL backend
      openGLES: The OpenGL ES backend

  blend factor:
    description: >
      Determines how a blend factor is calculated. This factor will be combined
      with the original color based on the selected blend operation.
    ref:
      name: GPUBlendFactor
      anchor: '#enumdef-gpublendfactor'
    values:
      zero: >
        Factor is set to zero.<br>
        `(0, 0, 0, 0)`
      one: >
        Factor is set to one. <br>
        `(1, 1, 1, 1)`
      src: >
        Factor is set to the source values. <br>
        `(R_src, G_src, B_src, A_src)`
      one minus src: >
        Factor is set to one minus source value. <br>
        `(1 - R_src, 1 - G_src, 1 - B_src, 1 - A_src)`
      src alpha: >
        Factor is set to the source alpha value. <br>
        `(A_src, A_src, A_src, A_src)`
      src alpha saturated: >
        Factor is set to the source alpha value. <br>
        `(A_src, A_src, A_src, A_src)`
      one minus src alpha: >
        Factor is set to one minus the source alpha value. <br>
        `(1 - A_src, 1 - A_src, 1 - A_src, 1 - A_src)`
      dst: >
       Factor is set to the destination value.<br>
       `(R_dst, G_dst, B_dst, A_dst)`
      one minus dst: >
        Factor is set to one minus destination value. <br>
        `(1 - R_dst, 1 - G_dst, 1 - B_dst, 1 - A_dst)`
      dst alpha: >
        Factor is set to the destinatinon alpha value. <br>
        `(A_dst, A_dst, A_dst, A_dst)`
      one minus dst alpha: >
        Factor is set to one minus the destionation alpha value. <br>
        `(1 - A_dst, 1 - A_dst, 1 - A_dst, 1 - A_dst)`
      constant: >
        Factor is set to the constant value.<br>
        (See %% method(render pass encoder, set blend constant) %%
        for setting of the constant value.)<br>
        `(R_const, G_const, B_const, A_const)`
      one minus constant: >
        Factor is set to one minus the constant value.<br>
        (See %% method(render pass encoder, set blend constant) %%
        for setting of the constant value.)<br>
        `(1 - R_const, 1 - G_const, 1 - B_const, 1 - A_const)`

  blend operation:
    description: >
      The algorithm used to blend source and destination colors.
    ref:
      name: GPUBlendOperation
      anchor: "#enumdef-gpublendoperation"
    values:
      add: >
        Adds the scaled source and scaled destination together.<br>
        `(RGBA_src` &times; `RGBA_src_factor) + (RGBA_dst` &times; `RGBA_dst_factor)`
      subtract: >
        Subtracts the scaled destination from the scaled source.<br>
        `(RGBA_src` &times; `RGBA_src_factor) - (RGBA_dst` &times; `RGBA_dst_factor)`
      reverse subtract: >
        Subtracts the scaled source from the scaled destination.<br>
        `(RGBA_dst` &times; `RGBA_dst_factor) - (RGBA_src` &times; `RGBA_src_factor)`
      min: >
        Takes the minimum of the source and destination.<br>
        `min(RGBA_src, RGBA_dst)`
      max: >
        Takes the maximum of the source and destination.<br>
        `max(RGBA_src, RGBA_dst)`

bitmask:
  texture usage:
    description: Determine how a GPUTexture maybe be used after creation.
    ref:
      name: GPUTextureUsage
      anchor: '#namespacedef-gputextureusage'
    values:
      none: No usage specified.
      copy src: The texture can be used as the source of a copy operation.
      copy dst: The texture can be used as the destination of a copy operation.
      texture binding: >
        The texture can be bound for use as a sampled texture in a shader.
      storage binding: >
        The texture can be bound for use as a storage texture in a shader.
      render attachment: >
        The texture can be used as a colour or depth/stencil attachment in a
        render pass.
      present: The texture can be used to "present" the texture on screen.

function:
  create instance:
    description: Creates an instance of the Dawn WebGPU system
    returns:
      instance: The created %% instance %%.
    args:
      descriptor: >
        The %% instance descriptor %% pointer. Maybe `%% null %%` to create
        a default instance.

  get proc address:
    description: >
      Returns the function pointer for the requested WebGPU API method *procName*.
    returns:
      proc: >
        The %% proc %% function pointer if it exists,
        %% null %% otherwise.
    args:
      device: The %% device %% to retrieve the proc for
      proc name: The name of the pointer to retrieve

structure:
  adapter properties:
    description: Property information for a specific adapter
    values:
      vendor ID: >
        The PCIe ID if available but can be other values on systems which do
        not provide a PCIe ID.
      vendor name: >
        The name of the vendor of the adapter, if available.
        Empty string otherwise.
      architecture: >
        The name of the family or class of GPUs the adapter belongs to, if
        available. Empty string otherwise.
      device ID: >
        The vendor-specific device identifier.
      name: >
        A vendor-specific identifier for the adapter, if available.
        Empty string otherwise.
      driver description: >
        A human readable string describing the adapter as reported by the
        driver, if available. Empty string otherwise.
      adapter type: The type of the adapter
      backend type: The backend platform used by the adapter

object:
  adapter:
    description: >
      An *adapter* identifies an implemention of WebGPU on the system.
    ref:
        name: Adapters
        anchor: '#adapters'
    methods:
      get limits:
        description: Retrieves the limits which can be used with this adapter.
        returns:
          bool: Returns true if the limits were successfully retrieved.
        args:
          adapter: The %% adapter %% from which to query the limits.
          limits: The %% supported limits %% object to populate. Must not be %% null %%.
